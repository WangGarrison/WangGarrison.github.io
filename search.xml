<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux：gcc和g-的使用与区别</title>
      <link href="/2020/08/18/Linux%EF%BC%9Agcc%E5%92%8Cg-%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/18/Linux%EF%BC%9Agcc%E5%92%8Cg-%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="gcc与g-是什么">gcc与g++是什么</h2><p>gcc：是GCC中的GNU C Compiler（C 编译器）注意：GCC与gcc是两个东西</p><p>g++：是GCC中的GNU C++ Compiler（C++编译器）</p><p>GCC: GNU Compiler Collection(GNU 编译器集合)，它可以编译C、C++、JAV、Fortran、Pascal、Object-C、Ada等语言。</p><h2 id="gcc与g-区别">gcc与g++区别</h2><p><font color='red'>gcc和g++都可以编译c语言和c++</font></p><p>如果是 .c文件，gcc按照c语言的方式去编译，g++会按照c++的方式编译；如果是 .cpp文件，gcc和g++都会按照c++的方式去编译</p><p>gcc只会默认连接c库，不会连接c++库，而g++都会连接，gcc编译cpp文件时，必须手动连接c++的库（命令：gcc -o main main.cpp  -lstdc++）</p><h2 id="gcc-g-的使用">gcc/g++的使用</h2><p>gcc与g++使用方法相同，这里只以gcc为例</p><p>1、预编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -E **.c  <span class="hljs-comment">#执行命令后生成**.i文件</span><br></code></pre></td></tr></table></figure><p>预编译阶段：处理预编译指令，删除注释，宏替换</p><p>2、编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -S **.i  <span class="hljs-comment">#执行命令后默认生成一个**.s文件</span><br></code></pre></td></tr></table></figure><p>编译阶段：语法、词法分析，代码优化，汇总符号</p><p>3、汇编</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -c **.s  <span class="hljs-comment">#执行命令后生成**.o文件，是可重定位的二进制文件</span><br></code></pre></td></tr></table></figure><p>汇编阶段：翻译成二进制，生成各个段，生成符号表</p><p>4、链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc **.o  <span class="hljs-comment">#默认生成一个a.out文件，a.out是可执行文件</span><br></code></pre></td></tr></table></figure><p>链接阶段：合并各个段，符号解析，符号重定位</p><p>上述命令可以加-o指定生成的文件名，o是output的缩写，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc **.o -o 自定义的文件名  <span class="hljs-comment">#指定生成的可执行文件名称</span><br></code></pre></td></tr></table></figure><p><strong>上述过程总结如下图</strong><br><img src="https://img-blog.csdnimg.cn/20200818203115154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200818204208939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：进程相关的操作</title>
      <link href="/2020/08/15/Linux%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/15/Linux%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是进程">什么是进程</h2><p>在Linux中触发任何一个事件，系统都会将它定义为一个进程，并且给予这个进程一个ID，称为<strong>PID</strong>（Process ID），同时根据触发这个进程的用户与相关属性关系，给予这个PID一组有效的权限设置，操作系统中对进程的定义如下：</p><p><strong>进程(process)</strong>：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，即进行中的程序或运行中的程序，也就是程序的一次实例化</p><p><strong>程序(program)</strong>：存储在磁盘上的二进制可执行文件，程序员编写源代码文件，由编译器编译链接生成的文件。Windows上可执行程序是.exe文件，Linux上是a.out文件（ELF格式的文件）</p><h2 id="执行一个程序，生成进程">执行一个程序，生成进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">路径 可执行文件名      <span class="hljs-comment">#./程序有文件名称，表示前台执行，必须等待进程执行结束</span><br>路径 可执行文件名 &amp;    <span class="hljs-comment">#./程序文件名 &amp;，表示后台执行</span><br></code></pre></td></tr></table></figure><h2 id="查看进程">查看进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps       <span class="hljs-comment">#查看 Linux 中当前运行的进程</span><br><span class="hljs-built_in">jobs</span>     <span class="hljs-comment">#查看当前终端的后台任务  任务号 任务状态 任务名称</span><br>ps aux   <span class="hljs-comment">#查看系统所有的进程</span><br>ps -A    <span class="hljs-comment">#所有的进程均显示出来，与-e具有同样的效果</span><br>ps -e    <span class="hljs-comment">#所有的进程均显示出来</span><br>ps -a    <span class="hljs-comment">#不显示与终端有关的进程</span><br>ps -l    <span class="hljs-comment">#较长、较详细的将该PID的信息列出</span><br>ps -f    <span class="hljs-comment">#做一个更完整的输出</span><br></code></pre></td></tr></table></figure><p>ps -l会列出与你的操作环境（bash）有关的进程，显示的如下：<br><img src="https://img-blog.csdnimg.cn/20200815114402522.png#pic_center" alt="在这里插入图片描述"><br>上图中ps -l命令下面一行的含义如下：<br><img src="https://img-blog.csdnimg.cn/20200815115123804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="结束一个进程">结束一个进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> pid      <span class="hljs-comment">#结束进程标识符为pid的进程</span><br>pkill cmd     <span class="hljs-comment">#结束一组相同cmd的进程</span><br><span class="hljs-built_in">kill</span> -9 pid   <span class="hljs-comment">#强制结束一个进程</span><br></code></pre></td></tr></table></figure><h2 id="挂起一个进程">挂起一个进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -stop pid<br></code></pre></td></tr></table></figure><h2 id="唤醒">唤醒</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bg</span> 任务号  <span class="hljs-comment">#将任务唤醒到后台执行</span><br><span class="hljs-built_in">fg</span> 任务号  <span class="hljs-comment">#将任务唤醒到前台执行</span><br></code></pre></td></tr></table></figure><h2 id="top：动态查看进程的变化">top：动态查看进程的变化</h2><p>ps命令是选取一个时间点的进程状态，top则可以持续监测进程运行的状态，使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -d 数字   <span class="hljs-comment">#数字表示秒数，整个进程界面更新的秒数，默认是5秒</span><br>top -b       <span class="hljs-comment">#以批量的方式执行top</span><br>top -n       <span class="hljs-comment">#与-b搭配，意义是需要执行几次top的输出结果</span><br>top -p       <span class="hljs-comment">#指定某些歌PID来执行查看监测</span><br></code></pre></td></tr></table></figure><p>在top执行过程当中可以使用的按键命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">?  <span class="hljs-comment">#显示在top当中可以输入的按键命令</span><br>P  <span class="hljs-comment">#以CPU的使用排序显示</span><br>M  <span class="hljs-comment">#以Memory的使用排序显示</span><br>N  <span class="hljs-comment">#以PID来排序</span><br>T  <span class="hljs-comment">#由该进程使用的CPU使用时间累积（TIME+）排序</span><br>k  <span class="hljs-comment">#给予某个PID一个信号（signal）</span><br>r  <span class="hljs-comment">#给予某个PID重新制定一个nice值</span><br>q  <span class="hljs-comment">#退出top的按键</span><br></code></pre></td></tr></table></figure><p>执行top命令默认显示如下图（数据是动态变化的）：<br><img src="https://img-blog.csdnimg.cn/20200815120843152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>top的功能非常多，可以使用man top命令来查看它的说明文档</p><h2 id="参考书籍">参考书籍</h2><p>《鸟哥的Linux私房菜》第16章 进程管理与SELinux初探</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：文件的压缩与解压</title>
      <link href="/2020/08/15/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/"/>
      <url>/2020/08/15/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下常见的压缩包">Linux下常见的压缩包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">***.zip      zip程序压缩的文件<br>***.gz       gzip程序压缩的文件<br>***.tar      tar程序打包的文件，并没有压缩过<br>***.tar.gz   tar程序打包的文件，并且经过gzip的压缩<br>***.tgz      与***.tar.gz可以认为是一样的<br>***.tar.xz   tar程序打包的文件，并且经过xz的压缩<br></code></pre></td></tr></table></figure><p>虽然Linux文件的属性与文件后缀名没有绝对关系，但是为了帮助人们更好识别，适当的扩展名是可以有的。</p><h2 id="打包文件">打包文件</h2><p>压缩/解压命令通常仅能对一个文件压缩/解压，如此一来，要对一大堆文件进行压缩，打包命令 tar 就尤为重要了，打包即将很多文件结合为一个文件，方便进行压缩<br>打包命令：例如要对当前目录下的main.c 和test.c打包成一个文件名为coding.tar，执行的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar cf coding.tar  main.c test.c<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200815093358690.png#pic_center" alt="在这里插入图片描述"><br>tar的选项可有如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">c  创建，创建包的时候使用<br>f  目标为文件而不是设备<br>x  释放文档内容，在解包的时候使用<br>t  只查看包中的内容而不释放<br>v  显示详细过程<br>z  在GNU版本新加的选项，使得tar命令有压缩与解压缩功能<br></code></pre></td></tr></table></figure><p>以上选项可以组合，例如上例中的cf选项</p><h2 id="压缩">压缩</h2><p>文件打包以后，就可以进行压缩了，例如上例中生成的coding.tar包，对其压缩的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip  coding.tar<br></code></pre></td></tr></table></figure><p>执行该命令后，会生成coding.tar.gz压缩包<br><img src="https://img-blog.csdnimg.cn/20200815094210919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="解压">解压</h2><p>解压就是对文件压缩的逆过程，<font color='red'>先进行解压缩，再进行解包</font></p><p>第一步：解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip -d coding.tar.gz   <span class="hljs-comment">#执行该命令会生成coding.tar包</span><br></code></pre></td></tr></table></figure><p>第二步：解包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xf coding.tar   <span class="hljs-comment">#执行该命令会把main.c和test.c解出来</span><br></code></pre></td></tr></table></figure><p>tar在新版本中加的选项 z 可以使得tar命令具有压缩与解压缩的功能，因此压缩与解压可以直接这样执行：<br><img src="https://img-blog.csdnimg.cn/20200815095058585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：</strong><br>coding.tgz文件可以通过gzip命令解压，可以通过tar命令不使用z选项进行解包<br>coding.tar.gz文件同样可以通过tar命令加上z选项（tar zxf）进行解压并解包</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：文件操作相关的命令</title>
      <link href="/2020/08/13/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/08/13/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux：文件操作相关的命令">Linux：文件操作相关的命令</h2><h2 id="1-创建文件">1.创建文件</h2><p>创建普通文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">touch filename  <span class="hljs-comment">#创建一个普通文件，eg: touch main.c</span><br></code></pre></td></tr></table></figure><p>创建目录文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir direname  <span class="hljs-comment">#创建一个目录，eg: mkdir MyCode</span><br></code></pre></td></tr></table></figure><h2 id="2-删除文件">2.删除文件</h2><p>删除普通文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm filename  <span class="hljs-comment">#删除一个普通文件</span><br></code></pre></td></tr></table></figure><p>删除目录文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rmdir direname  <span class="hljs-comment">#删除一个空目录，只能删除空目录</span><br>rmdir -r direname  <span class="hljs-comment">#删除非空目录，-r选项让它递归地去删除</span><br></code></pre></td></tr></table></figure><h2 id="3-拷贝文件">3.拷贝文件</h2><p>拷贝普通文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp 路径1/filename 路径2  <span class="hljs-comment">#将路径1下的filename文件拷贝一份到路径2下</span><br></code></pre></td></tr></table></figure><p>拷贝目录文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp -r 路径1/direname 路径2  <span class="hljs-comment">#将路径1下的direname目录拷贝到路径2下</span><br></code></pre></td></tr></table></figure><h2 id="4-剪切-移动文件">4.剪切/移动文件</h2><p>剪切/移动普通文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv 路径1/filename 路径2  <span class="hljs-comment">#将路径1下的filename文件剪切/移动到路径2下</span><br></code></pre></td></tr></table></figure><p>剪切/移动目录文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv 路径1/diername 路径2  <span class="hljs-comment">#将路径1下的direname目录剪切/移动到路径2下</span><br></code></pre></td></tr></table></figure><h2 id="5-文件重命名">5.文件重命名</h2><p>普通文件和目录文件重命名命令相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv 路径1/filename 路径1/newname  <span class="hljs-comment">#其实就是把该文件剪切到相同目录再换个名称</span><br></code></pre></td></tr></table></figure><h2 id="6-修改文件的属性">6.修改文件的属性</h2><p>修改文件的所有者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chown newuser filename  <span class="hljs-comment">#只有root用户才能执行</span><br></code></pre></td></tr></table></figure><p>修改文件的组用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chgrp newgroup filename  <span class="hljs-comment">#只有root用户才能执行</span><br></code></pre></td></tr></table></figure><p>修改文件的权限<br>1）文字设定法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod a/u/g/o+/-/=rwx的子集 filename  <span class="hljs-comment">#例如：chmod g-x main.c 将组用户对于main.c文件的执行权限删去</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200813105924877.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200813110501110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2）数字设定法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod 777 filename  <span class="hljs-comment">#三个数字分别代表一类用户的权限，数字取值范围是0~7</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200813110029110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="7-文件搜索命令">7.文件搜索命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find 查找的起始位置 查找的标准<br></code></pre></td></tr></table></figure><p>查找的标准有如下选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">-name  <span class="hljs-comment">#文件名：支持通配符</span><br>-<span class="hljs-built_in">type</span>  <span class="hljs-comment">#文件类型：-f普通文件 -d目录 -p管道 -l链接 -c字符设备 -b块设备 -s套接字 </span><br>-user  <span class="hljs-comment">#username</span><br>-group  <span class="hljs-comment">#groupname</span><br>-mtime +num/-num  <span class="hljs-comment">#+num:num天之前修改  -num：num天以内修改的</span><br>-amin  +num/-num  <span class="hljs-comment">#+num：num分之前修改 -num：num分以内修改的</span><br>-perm  <span class="hljs-comment">#根据文件权限搜索</span><br></code></pre></td></tr></table></figure><h2 id="8-管道命令和过滤命令">8.管道命令和过滤命令</h2><p>管道命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls -al /etc | less  <span class="hljs-comment">#管道命令将前一个命令的输出传递给后面的命令</span><br></code></pre></td></tr></table></figure><p>管道命令将前一个命令的输出传递给后面的命令<br><img src="https://img-blog.csdnimg.cn/2020081311405454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>过滤命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep 过滤的条件<br></code></pre></td></tr></table></figure><h2 id="9-在终端查看文件内容">9.在终端查看文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat filename  <span class="hljs-comment">#直接将文件全部内容显示到终端界面上</span><br>less filename  <span class="hljs-comment">#类似于文本查看器</span><br>more filename  <span class="hljs-comment">#和cat命令类似，但不会一次直接将所有的内容显示</span><br>head -n filename  <span class="hljs-comment">#显示文件前n行内容</span><br>tail -n filename  <span class="hljs-comment">#显示文件末尾n行内容</span><br>tail -f filename  <span class="hljs-comment">#循环读取文件尾部的内容，不断刷新的</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：文本编辑器vi-vim的使用</title>
      <link href="/2020/08/13/Linux%EF%BC%9A%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8vi-vim%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/13/Linux%EF%BC%9A%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8vi-vim%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux：vi-vim">Linux：vi/vim</h2><p><strong>vi</strong>：在所有的Linux发行版上面都内置的一个文本编辑器，很多软件默认也使用vi作为它们的编辑工具</p><p><strong>vim</strong>：可以认为是vi的高级版本，它具有程序编辑能力，可以用字体颜色来辨别语法的正确性，vim里面还加入了很多额外的功能，例如多文件编辑、区块复制等</p><h2 id="vi-vim的使用">vi/vim的使用</h2><p>vim有三种基本操作模式，分别是（一般）命令模式，插入（编辑）模式，（命令行）末行模式</p><p><strong>一般命令模式</strong><br>使用vim打开一个文件就进入一般命令模式了，例如用vim 打开main.c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim main.c<br></code></pre></td></tr></table></figure><p>如果当前目录下没有main.c文件，执行该命令就会新建一个main.c，进入后显示如下图<br><img src="https://img-blog.csdnimg.cn/20200813203946291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在该模式下可以使用上下左右按键来移动光标，也可以使用删除、复制、粘贴等功能。命令如下：<br><img src="https://img-blog.csdnimg.cn/20200813212924537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>插入（编辑）模式</strong><br>在一般命令模式中可以进行删除、复制、粘贴等操作，但是却无法编辑文件的内容，要编辑文件内容，就要在一般命令模式按下i、l、o、O、a、A、r、R中任何一个字母，就会进入编辑模式，在界面左下角会显示INSERT模式<br><img src="https://img-blog.csdnimg.cn/20200813205019547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入的字母代表的意思如下：<br><img src="https://img-blog.csdnimg.cn/20200813205751447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时就可以进行编辑了，如果要回到一般命令模式，按下Esc键即可</p><p><strong>（命令行）末行模式</strong><br>末行模式可以对vim做一个配置，对文本进行保存、退出编辑、全文搜索、替换等操作<br>在一般命令模式下输入：/ ？三个中的任何一个就可进入末行模式，输入后显示如下图<br><img src="https://img-blog.csdnimg.cn/20200813210254314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>光标到了最末尾一行，这就是末行模式，可以输入一些命令对文件进行操作，命令如下：<br><img src="https://img-blog.csdnimg.cn/20200813213151242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意：一般命令模式可与编辑模式及末行模式切换，但编辑模式不可直接切换为末行模式，<strong>通常编辑完文本后，先按Esc转到一般命令模式，再按：转到末行模式，最后输入wq保存并退出</strong></p><p>这三种模式之间的关系如下图<br><img src="https://img-blog.csdnimg.cn/20200813214504358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="vim的简单配置">vim的简单配置</h2><p>默认vim编辑器配置比较单调，我们可以自己修改，例如加入行号，自动缩进，设置tab缩进格数，设置鼠标等<br>配置文件有两个位置，第一个是在/etc/vimrc，该文件需root用户修改，修改后的配置对全系统有效，第二个在~/.vimrc，修改该配置只针对此用户有效。选择这两个位置中的一个进行编辑即可。具体配置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> nu  <span class="hljs-comment">#设置行号  set nonu  #取消行号</span><br><span class="hljs-built_in">set</span> hlsearch  <span class="hljs-comment">#设置高亮查找，默认就是高亮查找  set nohlsearch  #取消高亮查找</span><br><span class="hljs-built_in">set</span> autoindent  <span class="hljs-comment">#设置自动缩进</span><br><span class="hljs-built_in">set</span> noautoindent  <span class="hljs-comment">#取消自动缩进</span><br><span class="hljs-built_in">set</span> cindent  <span class="hljs-comment">#设置c自动缩进</span><br><span class="hljs-built_in">set</span> tabstop=4  <span class="hljs-comment">#设置tab键为四个空格</span><br><span class="hljs-built_in">set</span> shiftwidth=4  <span class="hljs-comment">#将换行自动缩进设置为四个空格</span><br><span class="hljs-built_in">set</span> smartindent  <span class="hljs-comment">#设置智能对齐</span><br><span class="hljs-built_in">set</span> showcmd  <span class="hljs-comment">#命令行显示输入的命令</span><br><span class="hljs-built_in">set</span> mouse=a  <span class="hljs-comment">#打开鼠标</span><br>syntax on  <span class="hljs-comment">#设置根据程序语法显示不同颜色</span><br></code></pre></td></tr></table></figure><h2 id="vim多窗口功能">vim多窗口功能</h2><p>vim支持多窗口视图，当打开一个文件，在末行模式下输入He表示在下边分屏浏览目录，He！表示在上分屏浏览目录，Ve在左边分屏浏览目录，Ve！在右边分屏浏览目录，示例如下图：<br><img src="https://img-blog.csdnimg.cn/20200813221501311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入Ve！后回车，在右侧分屏浏览目录如下图<br><img src="https://img-blog.csdnimg.cn/20200813221523693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="参考书籍">参考书籍</h2><p>《鸟哥的Linux私房菜》第四版 第九章 vim程序编辑器</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：文件系统、文件类型与文件权限</title>
      <link href="/2020/08/11/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E3%80%81%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
      <url>/2020/08/11/Linux%EF%BC%9A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E3%80%81%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux的文件系统">Linux的文件系统</h2><p>现在Linux大多采用ext4文件系统（Fourth extended filesystem），ext4是索引式的文件系统，以ext4文件系统格式化磁盘时，将磁盘划分成三个区：</p><p><strong>1.superblock（超级区块）</strong>：记录此文件系统的整体信息，包括inode区块的总量、使用量、剩余量，以及文件系统的格式与相关信息等；<br><strong>2.inode</strong>：很多inode节点，给每一个inode都分配一个编码，一个文件会有一个inode节点，在此inode中存储文件的属性信息以及存储文件内容的那些block号<br><strong>3.block（数据区块）</strong>：很多block，给每个block都分配了一个编号，每一个block用于存储文件真实内容，若文件太大时，会占用多个数据区块，一个block一般4K大小</p><h2 id="文件类型与文件权限">文件类型与文件权限</h2><p>在终端输入 ls  -l 查看文件的属性，显示如下图：<br><img src="https://img-blog.csdnimg.cn/20200811210956640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color='red'><strong>第1栏文件类型：</strong></font>Linux下一切皆文件，Linux系统一共有五种文件类型，注意：Linux并不以文件的扩展名区分文件类型，Linux的五种文件类型如下：</p><p>普通文件：用符号 - 表示，例如.c、.cpp、.h、.txt等文件<br>目录文件：d<br>链接文件：l，类似于Windows上的快捷方式<br>管道文件：p，应用在进程间通信<br>设备文件：字符设备文件 c，块设备文件 b，套接字 s</p><p><font color='red'><strong>第2栏文件权限：</strong></font>第二列每三个字母代表一种用户类型的权限，一个文件将访问其的用户划分成三类，分别是所有者、组用户和其他用户，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200811212521303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color='red'><strong>第3栏文件的链接数：</strong></font>普通文件：硬链接文件个数<br>目录文件：目录中一级子目录的个数<br><font color='red'><strong>第4栏文件的所有者</strong></font><br><img src="https://img-blog.csdnimg.cn/20200811212913500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color='red'><strong>第5栏文件所属的组</strong></font><br><font color='red'><strong>第6栏文件的大小，单位字节</strong></font><br><font color='red'><strong>第7栏文件最后修改时间</strong></font><br><font color='red'><strong>第8栏文件名</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux：目录组织结构、绝对路径与相对路径、目录相关命令</title>
      <link href="/2020/08/11/Linux%EF%BC%9A%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E3%80%81%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E3%80%81%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/08/11/Linux%EF%BC%9A%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E3%80%81%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E3%80%81%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux目录组织结构">Linux目录组织结构</h2><p>在Linux下面，所有的文件与目录都是由根目录开始的，根目录是所有文件与目录的源头，然后再一个一个的分支下来，像树枝状，如下图<br><img src="https://img-blog.csdnimg.cn/20200811104213517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="目录树directory tree"><br>Linux的FHS（Filesystem Hierarchy Standard）给出了每个特定的目录下应该存放什么样的文件，FHS目的是希望让用户可以了解到已安装软件通常放置于哪个目录下</p><p><font color='red'><strong>/bin</strong></font>：存放常用命令（即二进制可执行程序），主要有：cat、ls、mkdir、tar、mount、mv、cp、bash等常用命令<br><font color='red'><strong>/etc</strong></font>：存放系统配置文件<br><font color='red'><strong>/home</strong></font>：所有普通用户的家目录，“~”代表目前这个用户的家目录<br><font color='red'><strong>/root</strong></font>：系统管理用户的家目录<br><font color='red'><strong>/usr</strong></font>：存放系统应用程序及文档，（usr全称UNIX Software Resource）<br><font color='red'><strong>/proc</strong></font>：虚拟文件系统目录，以进程为单位存储内存的映射，（proc全称process information pseudo-file system进程信息虚拟文件系统）<br><font color='red'><strong>/dev</strong></font>：存放设备文件<br><font color='red'><strong>/mnt</strong></font>：临时挂载点<br><font color='red'><strong>/lib</strong></font>：存放库文件<br><font color='red'><strong>/boot</strong></font>：系统内核及启动有关的文件<br><font color='red'><strong>/tmp</strong></font>：存放各种临时文件，是所有用户均可访问的地点<br><font color='red'><strong>/var</strong></font>：存放系统运行中常改变的文件，如系统日志</p><h2 id="绝对路径与相对路径">绝对路径与相对路径</h2><p>根据文件名写法的不同，将所谓的路径定义为绝对路径与相对路径<br><font color='red'><strong>绝对路径</strong></font>：由根目录(/)开始写起的文件名或目录名称，例如：/usr/local/src<br><font color='red'><strong>相对路径</strong></font>：相对于当前位置的路径，即从当前位置开始到指定位置的路径，<strong>‘.’代表当前位置，‘..’代表当前位置的上一层目录</strong>，例如：./main.c表示当前位置下的main.c文件</p><p>区分绝对路径和相对路径只需要看首字符，如果首字符是‘/’，则是绝对路径，其他的都是相对路径<br><strong>注意</strong>：在写程序（shell脚本）来管理系统的条件下，务必使用绝对路径，因为绝对路径的写法虽然比较麻烦，但是可以肯定的是这个写法是唯一的且正确的，若使用相对路径，则可能由于执行的工作环境不同导致一些问题的发生</p><h2 id="目录相关命令">目录相关命令</h2><p><font color='red'><strong>.</strong></font>：代表当前目录，例如./main.c当前目录下的main.c文件</p><p><font color='red'><strong>..</strong></font>：代表上一层目录，例如../test.c上一层目录下的test.c文件</p><p><font color='red'><strong>~</strong></font>：代表目前使用者身份的家目录，例如cd ~dmtsai等价于cd /home/dmtsai</p><p><font color='red'><strong>cd</strong></font>：change directory 切换目录，例如cd /usr/share</p><p><font color='red'><strong>pwd</strong></font>：print working directory 显示当前工作位置的绝对路径</p><p><font color='red'><strong>mkdir</strong></font>：make directory 建立一个新目录</p><p><font color='red'><strong>rmdir</strong></font>：remove directory 删除一个空目录，目录需要一层一层的删除才行，而且被删除的目录里面必定不能存在其他的目录或文件，即必须是空目录，如果要删除非空目录，要使用命令<strong>rmdir  -r  dirname</strong>，-r参数让它递归地去删除</p><p><font color='red'><strong>ls</strong></font>：查看文件或目录的信息，<br>用法：ls  路径，显示指定路径下的文件，如果不给路径，默认显示的是当前目录的文件<br>ls命令的选项与参数：<br>-a显示所有的文件，连同隐藏的文件（开头为 <strong>.</strong> 的文件）<br>-i         显示文件对应的inode节点号<br>-l         显示文件的详细信息，包含文件的属性与权限等数据（常用ls  -l也可简化为ll）</p><p><strong>参考书籍</strong><br>《鸟哥的Linux私房菜》第四版 第五章Linux的文件权限与目录配置</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：删除单链表中p节点，时间复杂度O-1</title>
      <link href="/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A0%E9%99%A4%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%ADp%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O-1/"/>
      <url>/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A0%E9%99%A4%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%ADp%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O-1/</url>
      
        <content type="html"><![CDATA[<h2 id="题目背景">题目背景</h2><p>在plist中删除p节点，时间复杂度要求O(1)</p><h2 id="算法">算法</h2><p>因为时间复杂度为O(1)，所以常规思路遍历链表是不行的。删除节点，其实是把该节点数据域清除，已知了p节点，那么可以知道它的next节点，所以可以把p节点的下一个节点的数据域赋值给p节点数据域，再让p节点的next指向p-&gt;next-&gt;next，就实现了p节点数据域的清除，也就间接删除了p节点。<br>如果p是最后一个节点，则只好遍历链表，复杂度O(n)<br><strong>只有p是最后一个节点时间复杂度才是O(n),平均时间复杂度(O(1)*(n-1) + O(n))/n = O(1)，所以该算法时间复杂度仍为O(1)</strong></p><h2 id="C代码">C代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteP</span><span class="hljs-params">(Linklist plist, Linklist p)</span><span class="hljs-comment">//在plist中删除p节点，O(1)</span></span><br><span class="hljs-function"></span>&#123;<br>assert(plist != <span class="hljs-literal">NULL</span>);<br>assert(p != <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (plist == <span class="hljs-literal">NULL</span> || p == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//p不是最后一个节点</span><br>&#123;<br><span class="hljs-comment">//把p-&gt;next-&gt;data的值赋值给p-&gt;data,再让p-&gt;next指向下下个节点</span><br>p-&gt;data = p-&gt;next-&gt;data;<br>p-&gt;next = p-&gt;next-&gt;next;<br><span class="hljs-built_in">free</span>(p-&gt;next);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//p是最后一个节点</span><br>&#123;<br>LinkList tmp;<br><span class="hljs-keyword">for</span> (; tmp-&gt;next-&gt;next != <span class="hljs-literal">NULL</span>;)<br>&#123;<br>tmp = tmp-&gt;next;<br>&#125;<br>tmp-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(tmp-&gt;next-&gt;next);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：求单链表倒数第k个节点，只能遍历一次链表</title>
      <link href="/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%B1%82%E5%8D%95%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8C%E5%8F%AA%E8%83%BD%E9%81%8D%E5%8E%86%E4%B8%80%E6%AC%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%B1%82%E5%8D%95%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8C%E5%8F%AA%E8%83%BD%E9%81%8D%E5%8E%86%E4%B8%80%E6%AC%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2><p>求单链表倒数第k个节点，要求只能遍历一次单链表</p><h2 id="算法">算法</h2><p>用两个指针p、q来实现，p、q都指向链表开始位置，先让p指针向后走k个位置，然后两个指针同步走，当p指针为空的时候，q指针就是倒数第k个节点</p><h2 id="C代码">C代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">LinkList <span class="hljs-title">FindNodeOfK</span><span class="hljs-params">(LinkList plist, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (plist == <span class="hljs-literal">NULL</span> || plist-&gt;next == <span class="hljs-literal">NULL</span> || k &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>LinkList p = plist, q = plist;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k&amp;&amp;p != <span class="hljs-literal">NULL</span>; i++)<br>&#123;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//k的值大于链表的长度</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br>p = p-&gt;next;<br>q = q-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> q;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：判断两个单链表是否相交</title>
      <link href="/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/"/>
      <url>/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2><p>判断两个单链表是否相交，如果相交则返回第一个相交的节点，如果没有相交则返回NULL</p><h2 id="算法">算法</h2><p>1、先求两个链表长度的差值，让长的链表指针先走这个差值，如下图让plist1先走到p位置<br><img src="https://img-blog.csdnimg.cn/20200727213627962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、完成步骤1后，让两个链表的指针同步向后走，每走一步判断两个节点是否相等，如果相等则直接返回这个节点，如果走到NULL，则两个链表不相交</p><h2 id="C代码">C代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">LinkList <span class="hljs-title">IsIntersect</span><span class="hljs-params">(LinkList plist1, Linklist plist2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (plist1 == <span class="hljs-literal">NULL</span> || plist2 == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (ListEmpty(plist1) || ListEmpty(plist2))<span class="hljs-comment">//空链表</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> len1 = GetLength(plist1);<br><span class="hljs-keyword">int</span> len2 = GetLength(plist2);<br>LinkList p = plist1, q = plist2;<br><br><span class="hljs-keyword">if</span> (len1 &gt; len2)<span class="hljs-comment">// 长链表走差值</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len1 - len2; i++)<br>&#123;<br>p = p-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len2 - len1; i++)<br>&#123;<br>q = q-&gt;next;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//两个指针同步走</span><br>&#123;<br>p = p-&gt;next;<br>q = q-&gt;next;<br><span class="hljs-keyword">if</span> (p == q)<br>&#123;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：判断链表是否有环，若有环找到环入口</title>
      <link href="/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%EF%BC%8C%E8%8B%A5%E6%9C%89%E7%8E%AF%E6%89%BE%E5%88%B0%E7%8E%AF%E5%85%A5%E5%8F%A3/"/>
      <url>/2020/07/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%EF%BC%8C%E8%8B%A5%E6%9C%89%E7%8E%AF%E6%89%BE%E5%88%B0%E7%8E%AF%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤一：判断链表是否有环，如果有，则返回相遇的节点，如果没有则返回NULL">步骤一：判断链表是否有环，如果有，则返回相遇的节点，如果没有则返回NULL</h2><p><strong>算法</strong>：通过设置快慢指针来判断相遇，快指针一次走两个节点，慢指针一次走一个，若两个指针能相遇则说明有环，返回相遇的节点，若快指针走到NULL都没发生相遇，则说明没环，返回NULL<br><img src="https://img-blog.csdnimg.cn/20200727202646350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>C语言代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">LinkList <span class="hljs-title">Loop</span><span class="hljs-params">(LinkList plist)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (plist == <span class="hljs-literal">NULL</span> || plist-&gt;next == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>LinkList p = plist; <span class="hljs-comment">// 快指针</span><br>LinkList q = plist; <span class="hljs-comment">// 慢指针</span><br><br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// p-&gt;next != NULL 保证快指针一次走两个节点能够成功</span><br>&#123;<br>p = p-&gt;next-&gt;next;<br>q = q-&gt;next;<br><span class="hljs-keyword">if</span> (p == q)<br>&#123;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤二：找到有环链表的环的入口">步骤二：找到有环链表的环的入口</h2><p><strong>算法一</strong>：通过数学推导来找入口，具体如下：<br>设置快慢指针，快指针一次走两个节点，慢指针一次走一个节点，如下图，plist为链表起点，m为环入口，s点为快慢指针相遇点。<br><img src="https://img-blog.csdnimg.cn/20200727205446662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>当快慢指针相遇在s点，慢指针走过的路程为 x + y ,快指针走过的路程为x + y + (k +y) * n，n是快指针绕环的圈数。</strong><br>因为快指针速度是慢指针二倍，快慢指针移动的时间相同，所以快指针的路程等于慢指针路程的二倍，即2(x + y) = x + y + (k + y)n<br>化解：x + y = (k + y)n<br>x + y =  (k + y)(n - 1) + k+y<br><strong>x = (k + y)(n-1) + k</strong><br><strong>该式里，右边(k + y)(n -1)是绕环的路程，即从plist起点开始到环入口的路程等于从相遇点s开始到m的路程加上绕环的路程<br>因而可以让两个速度相同的指针，一个从plist开始走，一个从s点开始走，二者第一次相遇的点就是环入口m点</strong></p><p>C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">LinkList <span class="hljs-title">IsLoop</span><span class="hljs-params">(LinkList plist)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkList s = Loop(plist);<span class="hljs-comment">//通过上一步骤的Loop函数找到快慢指针相遇点</span><br><span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>LinkList p = plist;<br>LinkList q = s;<br><br><span class="hljs-keyword">while</span> (p != q)<br>&#123;<br>p = p-&gt;next;<br>q = q-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> p;<span class="hljs-comment">//p就是入环的第一个节点</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>算法二</strong>：遍历节点时把节点存储在一个表里，每次移动指针都在表里查看有无当前节点，若有出现重复则返回该节点，若无则继续遍历。该算法思路较为简单，但效率不高，O(n^2)<br>C代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TABLESIZE 10  </span><br><span class="hljs-function">Linklist <span class="hljs-title">FindCircleStart</span><span class="hljs-params">(Linklist plist)</span><span class="hljs-comment">//如果有环，找到入幻的第一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>assert(plist != <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (plist == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>Linklist p = plist;<br><span class="hljs-keyword">if</span> (IsCircle(p))<br>&#123;<br><span class="hljs-comment">//遍历p，把节点存起来，第一个出现重复的节点就是环的入口</span><br>Linklist table[TABLESIZE];<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p)<br>&#123;<br>table[i] = p;<br>p = p-&gt;next;<br>i++;<br><span class="hljs-keyword">if</span> (i &gt; TABLESIZE)<br>&#123;<br><span class="hljs-built_in">realloc</span>(table, <span class="hljs-keyword">sizeof</span>(table) * <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<span class="hljs-comment">//看已存的表里有没有重复的</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j +<span class="hljs-number">1</span>; k &lt; i; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (table[k] == table[j])<br><span class="hljs-keyword">return</span> table[k];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串算法：等宽替换-以少换多-以多换少</title>
      <link href="/2020/06/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AD%89%E5%AE%BD%E6%9B%BF%E6%8D%A2-%E4%BB%A5%E5%B0%91%E6%8D%A2%E5%A4%9A-%E4%BB%A5%E5%A4%9A%E6%8D%A2%E5%B0%91/"/>
      <url>/2020/06/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95%EF%BC%9A%E7%AD%89%E5%AE%BD%E6%9B%BF%E6%8D%A2-%E4%BB%A5%E5%B0%91%E6%8D%A2%E5%A4%9A-%E4%BB%A5%E5%A4%9A%E6%8D%A2%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一：写一个函数将字符串中的字符-移到字符串的前部分，前面的非-字符后移，但不能改变非-字符的先后顺序，例如auto-toc-处理后为-autoc">题目一：写一个函数将字符串中的字符*移到字符串的前部分，前面的非*字符后移，但不能改变非*字符的先后顺序，例如auto**toc**处理后为****autoc</h2><p><strong>算法一：</strong><br><img src="https://img-blog.csdnimg.cn/20200623153956201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="算法一"><br>C代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//算法1:从后往前复制非*的字符,然后前面的补*</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Move1</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span><span class="hljs-comment">//O(n),O(n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *arr =  (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(str)+<span class="hljs-number">1</span>);<br>assert(arr != <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">int</span> i = <span class="hljs-built_in">strlen</span>(str);<span class="hljs-comment">//str下标</span><br><span class="hljs-keyword">int</span> j = i;<span class="hljs-comment">//arr下标</span><br><span class="hljs-keyword">int</span> rtval;<span class="hljs-comment">//返回值</span><br><span class="hljs-keyword">for</span>(;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//从后往前复制非*的字符</span><br>&#123;<br><span class="hljs-keyword">if</span>(str[i] != <span class="hljs-string">'*'</span>)<span class="hljs-comment">//非*,需要复制到arr中</span><br>&#123;<br>arr[j--] = str[i];<br>&#125;<br>&#125;<br>rtval = <span class="hljs-built_in">strlen</span>(str)-j<span class="hljs-number">-1</span>;<br><span class="hljs-comment">//前面补*</span><br><span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>arr[j--] = <span class="hljs-string">'*'</span>;<br>&#125;<br><span class="hljs-built_in">strcpy</span>(str,arr);<span class="hljs-comment">//将数据复制到str中</span><br><span class="hljs-built_in">free</span>(arr);<br><br><span class="hljs-keyword">return</span> rtval;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法一时间复杂度O(n),空间复杂度0(n)</p><p><strong>算法二：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200623154404291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//算法2,利用两个下标i,j分别到字符串的末尾,通过i从后往前遍历,如果i的数据为非*则将数据复制到j处,</span><br><span class="hljs-comment">//j往前,如果没有复制则j不动,最后将前面的部分补充为*</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span><span class="hljs-comment">//O(n),O(1)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-built_in">strlen</span>(str);<span class="hljs-comment">//遍历的下标</span><br><span class="hljs-keyword">int</span> j = i;<span class="hljs-comment">//数据移动后的下标</span><br><span class="hljs-keyword">int</span> rtval;<span class="hljs-comment">//返回值</span><br><br><span class="hljs-keyword">for</span>(;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//利用i从后往前遍历字符串</span><br>&#123;<br><span class="hljs-keyword">if</span>(str[i] != <span class="hljs-string">'*'</span>)<br>&#123;<br>str[j--] = str[i];<br>&#125;<br>&#125;<br>rtval = <span class="hljs-built_in">strlen</span>(str)-j<span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>str[j--] = <span class="hljs-string">'*'</span>;<br>&#125;<br><span class="hljs-keyword">return</span> rtval;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法二未使用辅助空间，时间复杂度O(n),空间复杂度度O(1)</p><h2 id="题目二：将字符串中的空格替换为-20-例如-a-b-c-“a-20b-20-20c”">题目二：将字符串中的空格替换为%20,例如&quot;a b  c&quot;-&gt;“a%20b%20%20c”</h2><p><strong>算法一：</strong><br><img src="https://img-blog.csdnimg.cn/20200623154824220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>算法二：</strong><br><img src="https://img-blog.csdnimg.cn/202006231548409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>算法二C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//先统计空格数量，利用i定位到字符串末尾，j=i+空格数*2；</span><br><span class="hljs-comment">//再从后往前替换，遇到非空格的直接放，遇到空格替换为0 2 %, j往前移动3个</span><br><span class="hljs-keyword">int</span> i, j;<br><span class="hljs-keyword">int</span> blank = <span class="hljs-number">0</span>;<span class="hljs-comment">//空格数量</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; str1[i] != <span class="hljs-string">'\0'</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (str1[i] == <span class="hljs-string">' '</span>)<br>blank++;<br>&#125;<br><span class="hljs-keyword">for</span> (j = i + blank * <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)<span class="hljs-comment">//i是旧串末尾，j是新串的末尾</span><br>&#123;<br><span class="hljs-keyword">if</span> (str1[i] != <span class="hljs-string">' '</span>)<br>&#123;<br>str1[j] = str1[i];<br>j--;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//是空格</span><br>&#123;<br>str1[j--] = <span class="hljs-string">'0'</span>;<br>str1[j--] = <span class="hljs-string">'2'</span>;<br>str1[j--] = <span class="hljs-string">'%'</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目三：删除字符串中多余的空格-多个空格只保留一个-“a-b-c-d”-“a-b-c-d”">题目三：删除字符串中多余的空格,多个空格只保留一个.“a b c    d”-&gt;“a b c d”</h2><p><img src="https://img-blog.csdnimg.cn/20200623155226357.png" alt="在这里插入图片描述"><br>算法：i不断后移判断，若当前是空格，接下来也是空格，则不赋值，i后移，j不动<br>若当前是空格接下来不是空格或者当前是非空格则把i赋值给j，i后移，j后移</p><p>C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//i不断后移判断，若当前是空格，接下来也是空格，则不赋值，i后移，j不动</span><br><span class="hljs-comment">//若当前是空格接下来不是空格或者当前是非空格则把i赋值给j，i后移，j后移</span><br><span class="hljs-keyword">int</span> i, j;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; str2[i] != <span class="hljs-string">'\0'</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (str2[i] == <span class="hljs-string">' '</span>&amp;&amp;str2[i + <span class="hljs-number">1</span>] == <span class="hljs-string">' '</span>)<br>&#123;<br>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>str2[j] = str2[i];<br>j++;<br>&#125;<br>&#125;<br>str2[j] = <span class="hljs-string">'\0'</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言位运算及其应用</title>
      <link href="/2020/06/23/C%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2020/06/23/C%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>位运算符</strong></p><p>位运算符允许对一个字节或更大的数据单位中独立的位做处理：可以清除、设定，或者倒置任何位或多个位。也可以将一个整数的位模式（bit pattern）向右或向左移动，针对的是二进制。<br><img src="https://img-blog.csdnimg.cn/20200623143142494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200623143214315.png" alt="在这里插入图片描述"><br>注意：&lt;&lt;左移运算符最右边补0，&gt;&gt;右移运算符最左边补符号位，（记忆这两个符号方法：箭头朝哪一边就是哪一边移）</p><p><strong>位运算应用</strong><br>下面数据x设为1字节，即8位</p><p>去掉最后一位 ： (10110<strong>1</strong>-&gt;10110)   算法  x &gt;&gt; 1</p><p>在最后加一个0：(101101-&gt;101101<strong>0</strong>)  算法 x &lt;&lt; 1</p><p>在最后加一个1：(101101-&gt;101101<strong>1</strong>) 算法 (x &lt;&lt; 1)|1</p><p>把最后一位变成1： (10110<strong>0</strong>-&gt;10110<strong>1</strong>) 算法 x | 1</p><p>把最后一位变成0：(10110<strong>1</strong>-&gt;10110<strong>0</strong>) 算法 (x | 1)-1</p><p>最后一位取反：(10110<strong>1</strong>-&gt;10110<strong>0</strong>) 算法 x ^ 1</p><p>把右数第k位变成1：(101<strong>0</strong>01-&gt;101<strong>1</strong>01,k=3) 算法 x | (1 &lt;&lt; (k-1))</p><p>把右数第k位变成0： (101<strong>1</strong>01-&gt;101<strong>0</strong>01,k=3) 算法 x &amp; ~(1 &lt;&lt; (k-1))</p><p>右数第k位取反： (101<strong>0</strong>01-&gt;101<strong>1</strong>01,k=3) 算法 x ^ (1 &lt;&lt; (k-1))</p><p>取末三位： (1101<strong>101</strong>-&gt;101) 算法 x &amp; 7<br>注：7的二进制为0000  0111，x&amp;7即可取末三位</p><p>取末k位： (110<strong>1101</strong>-&gt;1101,k=4) 算法 x &amp; ((1 &lt;&lt; k)-1)</p><p>取右数第k位： (110<strong>1</strong>101-&gt;1,k=4) 算法 (x &gt;&gt; (k-1)) &amp; 1</p><p><strong>位运算方法总结</strong></p><p>1.确定符号，变1：|1；变0：&amp;0；取反：^1<br>2.确定数字<br>3.构造数字<br>例如：<img src="https://img-blog.csdnimg.cn/202006231501513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>例题：统计一个字节数据二进制1的个数</strong><br><img src="https://img-blog.csdnimg.cn/20200623151149156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言动态内存分配malloc、calloc、realloc</title>
      <link href="/2020/05/23/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8Dmalloc%E3%80%81calloc%E3%80%81realloc/"/>
      <url>/2020/05/23/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8Dmalloc%E3%80%81calloc%E3%80%81realloc/</url>
      
        <content type="html"><![CDATA[<h2 id="动态内存"><strong>动态内存</strong></h2><p>根据需要动态创建需要的内存。例如根据变量创建数组，其内存区域在堆。这里简单提一下堆与栈</p><p><strong>栈</strong>：局部变量所在的内存区域，在Windows默认其大小为1M，系统自行管理其内存（即你不用管回收问题）</p><p><strong>堆</strong>：动态内存所在区域，默认大小为2G左右（不同平台有差别），程序管理内存，特别要注意内存释放</p><p>从以上栈与堆的大小可以知道，堆比栈大的多，所以动态内存还有一个使用场景，即需要创建大容量的数组时</p><h2 id="malloc、calloc、realloc"><strong>malloc、calloc、realloc</strong></h2><p><strong>malloc</strong>(字节数): 创建成功，函数返回一个指向分配起始地址的指针，失败返回NULL，内存数据为没有初始化的随机值</p><p><strong>calloc</strong>(单元个数，每个单元的字节数): 创建成功，函数返回一个指向分配起始地址的指针，失败返回NULL，内存数据初始化为0</p><p><strong>realloc</strong>(旧内存地址，新的内存字节大小): 用于修改动态内存的大小</p><p><strong>注意</strong>：这三个是C语言表中库中的函数，使用时要引用头文件stdlib.h，返回的地址都是void*类型，要强制类型转换成你所要用的类型</p><p><strong>malloc与calloc主要区别</strong>： 1.malloc内存数据未初始化，为随机值，calloc内存数据初始化为0,<br>2.malloc只有一个参数，calloc有两个参数，注意看他们的函数原型声明：void* malloc(unsigned size);    void* calloc(size_t nelem, size_t elsize)</p><h2 id="free"><strong>free</strong></h2><p><strong>free</strong>(地址): 释放动态创建的内存，不释放会发生内存泄漏<br>free在使用的时候在以下情况会崩溃：1.越界（动态分配的内存太小）2.动态内存指针发生移动  3.重复释放</p><p>解释一下第二条动态内存指针发生移动导致free失败的原因<br>free函数只有一个参数，即分配的内存的首地址，它只用这一个信息就知道要释放多大的内存，这是因为动态分配的内存的那个首地址记录了它后边的分配的空间的大小的信息，因此只传给free函数内存首地址即可，若这个地址（指针）发生了移动，free就会崩溃。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不使用第三个变量交换两个整数a-b的值</title>
      <link href="/2020/05/21/%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0a-b%E7%9A%84%E5%80%BC/"/>
      <url>/2020/05/21/%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0a-b%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>通常交换两个整数a,b的值，要使用第三方变量temp，但是在一些笔试或面试中，要求<strong>不使用第三个变量来实现交换</strong>，下面总结三种方法。</p><h2 id="方法一：加法">方法一：加法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">5</span>;<br>a = a + b;<span class="hljs-comment">//a存储两数之和7</span><br>b = a - b;<span class="hljs-comment">//两数之和减去一个就是另一个，相当于b = 7-2，此时b已经变成最初a的值了</span><br>a = a - b;<span class="hljs-comment">//相当于a=7-2，a的值成为最初b的值</span><br></code></pre></td></tr></table></figure><h2 id="方法二：减法">方法二：减法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">5</span>;<br>a = a - b;<span class="hljs-comment">//a存储两数之差  a=2-5=-3</span><br>b = b + a;<span class="hljs-comment">//b加上a与b的差值即为最初a的值</span><br>a = b - a; <span class="hljs-comment">//b此时为最初a的值，减去差值即为最初b的值</span><br></code></pre></td></tr></table></figure><h2 id="方法三：异或">方法三：异或</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">5</span>;<br>a = a ^ b;   <span class="hljs-comment">//a存储ab"异或结果"</span><br>b = a ^ b;  <span class="hljs-comment">//"异或结果"与b异或得到的是最初a的值</span><br>a = a ^ b;  <span class="hljs-comment">// "异或结果"与此时变成a的b异或得到的是最初b的值</span><br></code></pre></td></tr></table></figure><h2 id="注意！">注意！</h2><p>上述三种方法都没有常规方法( tmp = a ; a = b ; b = tmp; )好，并且以上三种方法不能实现自己和自己的交换，自己和自己交换结果都会是0<br>例如异或方法，当a和b都是a时，就变为(a = a ^ a ; a = a ^ a ; a = a ^ a)，结果是0</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swap函数实现交换两个整数的值，易错总结</title>
      <link href="/2020/05/17/Swap%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E6%98%93%E9%94%99%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/17/Swap%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E6%98%93%E9%94%99%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正确做法">一、正确做法</h2><p><strong>首先正确的交换方式是如下代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp = *p1;<br>*p1 = *p2;<br>*p2 = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>用指针直接访问存储两个整数的内存空间，实现交换，下面归纳一下易错的地方</p><h2 id="二、只交换了形参">二、只交换了形参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap_err</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp = a;<br>a = b;<br>b = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况，只是交换了Swap函数里a，b的值（即只交换了形参的值），而主函数里的a，b是没有发生改变的，交换失败</p><h2 id="三、只是交换了形参的指向">三、只是交换了形参的指向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap_err2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> *tmp = p1;<br>p1 = p2;<br>p2 = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况看似形参传了引用，但函数体交换的是形参的指向，如下图所示<img src="https://img-blog.csdnimg.cn/20200517220942457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt=""><br>p1原本指向a，函数把p1指向了b，p2指向了a，交换了这两个形参的指向，但a，b并没有发生交换。<br>可以形象的理解为交换了两个房间的钥匙，房间里的内容并没有交换。</p><h2 id="四、小心野指针">四、小心野指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap_err3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> *tmp;<span class="hljs-comment">//野指针,悬挂指针,tmp是个局部变量,默认值为随机值</span><br>*tmp = *p1;<span class="hljs-comment">//*tmp崩溃,野指针不能访问</span><br>*p1 = *p2;<br>*p2 = *tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况程序会崩溃<br><img src="https://img-blog.csdnimg.cn/20200517221636187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt=""><br>这里tmp指针没有被初始化，即成为所谓的野指针<br>野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的），此时去解引用就是去访问了一个不确定的地址，所以结果是不可知的。<br>野指针不同于空指针，空指针是指一个指针的值为null，而野指针的值并不为null，野指针会指向一段实际的内存，只是它指向哪里我们并不知情，所以程序在这里崩溃了。<strong>编程时要小心避免野指针。</strong></p><h2 id="五、总结">五、总结</h2><p>交换成功的必要条件:<strong>1.传指针;2.解引用</strong><br>一个函数的改变要想影响另一个函数,必须满足两个条件:<strong>1.传指针;2.解引用</strong></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Github与hexo搭建的个人博客网站更新后显示404</title>
      <link href="/2020/05/17/Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E5%90%8E%E6%98%BE%E7%A4%BA404/"/>
      <url>/2020/05/17/Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E5%90%8E%E6%98%BE%E7%A4%BA404/</url>
      
        <content type="html"><![CDATA[<p>更新博客后<br>hexo s 本地显示正常，但是hexo d提交线上后，用域名打开显示404</p><p><strong>解决办法</strong></p><p>hexo d后，登录Github找到自己博客的仓库，<br>点击settings<br><img src="https://img-blog.csdnimg.cn/20200516195546338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="Github settings"><br>拉到底部将自己的域名填入，（虽然之前填过，但更新后有时要再填一次）<br><img src="https://img-blog.csdnimg.cn/20200516195808997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="custom domain"><br>然后再点击rename，（虽然这没改动，但仍要点击一次）<br><img src="https://img-blog.csdnimg.cn/20200516195939782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="click rename"><br>操作完之后就可以用域名打开网站了</p><p><img src="https://img-blog.csdnimg.cn/20200516200508342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OneNote-for-win10本地存储文件的备份与查看</title>
      <link href="/2020/05/17/OneNote-for-win10%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%9F%A5%E7%9C%8B/"/>
      <url>/2020/05/17/OneNote-for-win10%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>今天win10预装的OneNote突然卡在了打开笔记本页面，一番重启之后无解，准备重装又担心之前的数据没有上传到云，于是手动备份。</p><p>OneNote本地存储的文件在C:\Users\wi\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\AccessibilityCheckerIndex<br>该目录下成对出现的文件即为自己的笔记本，这些数据库文件为sqlite格式的db文件。使用SQLLiteSpy可以查看这些文件。<br>下载SQLLite数据库管理工具SQLLiteSpy<a href="http://www.winportal.com/sqlitespy" target="_blank" rel="noopener">下载地址</a>。<br>下载成功后解压缩，找到exe文件直接运行，在可视化窗口使用快捷键ctrl+F11打开数据库文件。使用该工具即可查看自己OneNote笔记本的数据结构。<br><img src="https://img-blog.csdnimg.cn/2020042609235772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWZhZ3VhbmdkZW1hbw==,size_16,color_FFFFFF,t_70" alt="SQLLite界面"><br>重装OneNote之前备份数据库文件，这样就不用担心数据的丢失了。</p>]]></content>
      
      
      <categories>
          
          <category> OneNote </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查找两数之和</title>
      <link href="/2020/05/16/%E6%9F%A5%E6%89%BE%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/05/16/%E6%9F%A5%E6%89%BE%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="查找两数之和">查找两数之和</h2><p><strong><strong>Leetcode刷题笔记</strong></strong><br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p><p>我的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span>* returnSize)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i, j;<br><span class="hljs-keyword">int</span> *p1 = nums;<br>    <span class="hljs-keyword">int</span> *a =(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*<span class="hljs-number">2</span>);<span class="hljs-comment">//动态分配内存，给a分配2个int的大小//malloc返回分配的首地址</span><br>                                          <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; numsSize - <span class="hljs-number">1</span>; i++)<br><span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; numsSize; j++) <br>&#123;<br><span class="hljs-keyword">if</span> ((*(p1 + i) + *(p1 + j)) == target) <br>&#123;<br>a[<span class="hljs-number">0</span>] = i; a[<span class="hljs-number">1</span>] = j;<br>                     <br>&#125;<br>&#125;<br>   *returnSize=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><p>暴力查找，时间复杂度 O(n^2)，本题逻辑较为简单，但要注意题注“The returned array must be malloced”.<br>算法可优化，具体参考leetcode该题讨论区。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>求整数位数，以及顺序与逆序输出各位数字</title>
      <link href="/2020/05/16/%E6%B1%82%E6%95%B4%E6%95%B0%E4%BD%8D%E6%95%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A1%BA%E5%BA%8F%E4%B8%8E%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97/"/>
      <url>/2020/05/16/%E6%B1%82%E6%95%B4%E6%95%B0%E4%BD%8D%E6%95%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A1%BA%E5%BA%8F%E4%B8%8E%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目背景：给一个正整数，-1-求它的位数，2-逆序输出每一位数字，3顺序输出每一位数字">题目背景：给一个正整数， 1.求它的位数，2.逆序输出每一位数字，3顺序输出每一位数字</h2><p><strong>1求位数，</strong><br>算法: 每次丢弃个位数字,计数器++,直到n为0<br>与我们用眼睛去数类似，即不断给该整数除以十，计数，此处要考虑当给的整数位0时的特殊情况，C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Count</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>)<br>&#123;<br>tmp++;<br>n /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.逆序输出</strong><br>算法：求出低位，输出低位，再丢弃低位，重复执行直到n为0<br>这里关键是求低位的算法，用除十取余来得到低位，C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReverseOutput</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);<br><span class="hljs-keyword">return</span>;<span class="hljs-comment">//提前结束该函数</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"-"</span>);<br>n = -n;<br>&#125;<br><br><span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,n%<span class="hljs-number">10</span>);<br>n /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.顺序输出</strong><br>算法:得到高位,输出高位,丢弃高位,直到n为0，<br>这里关键是得到高位的算法，C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OrderOutput</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp = Count(n); <span class="hljs-comment">//得到n是几位数字</span><br><span class="hljs-keyword">int</span> power = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, tmp - <span class="hljs-number">1</span>);<span class="hljs-comment">//获得高位</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, n / power);<span class="hljs-comment">//输出最高位</span><br>n %= power;<span class="hljs-comment">//丢弃最高位</span><br>power /= <span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
